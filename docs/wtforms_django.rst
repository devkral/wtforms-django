WTForms-Django
==============

.. module:: wtforms_django

This extension integrates `Django`_ with `WTForms`_.

.. _Django: https://www.djangoproject.com/
.. _WTForms: https://wtforms.readthedocs.io/


Template tags
-------------

.. module:: wtforms_django.templatetags.wtforms

Django templates do not allow arbitrarily calling functions with
parameters, making it impossible to use the HTML attribute rendering
feature of WTForms. To alleviate this, we provide a templatetag.

Adding :mod:`wtforms_django` to your ``INSTALLED_APPS`` will make the
WTForms template library available to your application. With this you
can pass extra  attributes to form fields similar to Jinja:

.. code-block:: django

    {% load wtforms %}
    {% form_field form.username class="big_text" onclick="do_something()" %}

.. note::

    By default, the HTML generated by ``{{ form.field }}`` syntax in
    Django templates will be auto-escaped. To avoid this, use Django's
    ``{% autoescape off %}`` block tag or use WTForms' ``form_field``
    template tag.


Model forms
-----------

.. module:: wtforms_django.orm

WTForms-Django can generate a :class:`~wtforms.form.Form` dynamically
so that it always reflects the current fields on a Django model. To
access the fields without knowing their names, the form can be
:meth:`iterated <wtforms.form.Form.__iter__>`.

Be aware that the automatic generation might not be as strict or
accurate with validation as a hand-written form.

.. autofunction:: model_form

Like any :class:`~wtforms.form.Form`, model forms can be extended using
inheritance.

.. code-block:: python

    UserFormBase = model_form(User)

    class UserForm(UserFormBase):
        new_pass = PasswordField("", validators=[Optional(), EqualTo("confirm_pass")])
        confirm_pass = PasswordField()


ORM fields
----------

.. module:: wtforms_django.fields

.. autoclass:: QuerySetSelectField

.. autoclass:: ModelSelectField

.. autoclass:: DateTimeField
